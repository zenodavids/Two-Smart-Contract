import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'

import CheckVoterAddress from '../components/CheckVoterAddress'
import Proposals from '../components/Proposal'
import AddVoter from '../components/AddVoter'

import { CONTRACT_ADDRESS, CONTRACT_ABI } from '../constants'

const Home = () => {
  const [contract, setContract] = useState()
  const [newVoter, setNewVoter] = useState('')
  const [newVoterStatus, setNewVoterStatus] = useState('')
  const [voterStatus, setVoterStatus] = useState()
  const [voterAddressToCheck, setVoterAddressToCheck] = useState('')
  const [proposals, setProposals] = useState([])
  const [chairperson, setChairperson] = useState('')

  // **************** Ethers Connection for the SmartContract ****************

  async function init() {
    const { ethereum } = window

    if (!ethereum) {
      console.error('Metamask not found')
      return
    }

    try {
      // Check if already connected
      const accounts = await ethereum.request({ method: 'eth_accounts' })
      if (accounts.length > 0) {
        const selectedAddress = accounts[0]
        await _initialize(selectedAddress)
        return
      }

      // Prompt to connect
      const account = await ethereum.request({ method: 'eth_requestAccounts' })
      const selectedAddress = account[0]
      await _initialize(selectedAddress)
    } catch (err) {
      console.error('Failed to connect to Metamask', err)
    }
  }

  async function _initialize() {
    await _intializeEthers()
  }

  const _intializeEthers = async () => {
    // Check that the browser supports window.ethereum
    if (!window.ethereum) {
      console.error('Ethereum provider not found')
      return
    }

    // ethers connection for the smart contract
    const provider = new ethers.providers.Web3Provider(window.ethereum)

    const contract = new ethers.Contract(
      CONTRACT_ADDRESS,
      CONTRACT_ABI,
      provider.getSigner(0)
    )

    // get the proposals
    const newProposal = await contract.getAllProposals()

    // get the chairman address
    const newChairperson = await contract.chairperson()

    // save the contract data into a hook to reuse it along the app
    setContract(contract)
    setProposals(newProposal)
    setChairperson(newChairperson)
  }

  // Connects to the smart contract contract id (check /contracts/contract-address.json)
  async function init() {
    // const [selectedAddress] = await window.ethereum.enable()
    const [selectedAddress] = await window.ethereum.request({
      method: 'eth_requestAccounts',
    })
    _initialize(selectedAddress)
  }

  useEffect(() => {
    // When the page loads it will initialize the init function
    // that we need to connect the frontend with the smartcontract
    init()
  }, [])

  // **************** Here Starts The Real Logic of the Frontend -> SmartContract ****************

  // Vote the selected proposal (you can only vote one time)
  const voteProposal = async (proposal) => {
    await contract.vote(proposal)
  }

  // Check if the address the user entered is a a voter or not
  const checkAddressVoter = async () => {
    try {
      const voterData = await contract.voters(`${voterAddressToCheck}`)
      setVoterStatus(voterData)
    } catch (err) {
      console.log(err)
      setVoterStatus('An error has occured')
    }
  }

  // It gives the right to vote to a new address
  const addNewVoter = async () => {
    try {
      await contract.giveRightToVote(newVoter)
      setNewVoterStatus('Success')
    } catch (err) {
      console.log(err)
      setNewVoterStatus('An error has occured')
    }
  }
  return (
    <>
      <Head>
        <title>INEC</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <button onClick={init}>Connect</button>

        <div className='flex flex-col justify-center items-center h-screen'>
          <h1 className='text-6xl font-bold text-slate-900'>NIGERIA DECIDES</h1>
          <h3 className='text-2xl mt-8 text-slate-900'>
            chairperson: {chairperson}
          </h3>
          <Proposals proposals={proposals} voteProposal={voteProposal} />
          <AddVoter
            addNewVoter={addNewVoter}
            setNewVoter={setNewVoter}
            newVoter={newVoter}
            newVoterStatus={newVoterStatus}
          />
          <CheckVoterAddress
            voterAddressToCheck={voterAddressToCheck}
            setVoterAddressToCheck={setVoterAddressToCheck}
            checkAddressVoter={checkAddressVoter}
            voterStatus={voterStatus}
          />
        </div>
      </main>
    </>
  )
}

export default Home
